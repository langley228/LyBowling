@model LyBowling.WebApp.Models.ModelView.GameVM
@{
    ViewBag.Title = "Game";
}
<style>
    .table {
        width: 650px;
    }

        .table > thead > tr > th {
            text-align: center;
            height: 20px;
            margin: 0;
            padding: 0;
        }
        .table > thead > tr > td {
            text-align: center;
            width: 20px;
            height: 20px;
            margin: 0;
            padding: 0;
        }

        .table > tbody > tr > th {
            text-align: center;
            height: 20px;
            margin: 0;
            padding: 0;
        }

        .table > tbody > tr > td {
            text-align: center;
            width: 20px;
            height: 20px;
            margin: 0;
            padding: 0;
        }
</style>
<br />
@if (Model.Current == null)
{
    using (Html.BeginForm("ReSet", "Bowling"))
    {
        <table>
            <tr>
                <td style="width:100px"></td>
                <td>
                    <span>X計分格:</span>
                </td>
                <td>
                    <select class="form-control" name="frameCount" style="width:80px">
                        @for (int i = 3; i < 11; i++)
                        {
                            <option @(i == Model.FrameCount ? "selected" : "")>@i</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="submit" class="btn btn-warning btn-sm" value="開局" />
                </td>
            </tr>
        </table>
    }
}
else
{
    <table>
        <tr>
            <td>
                @using (Html.BeginForm("Throw", "Bowling"))
                {
                    <input type="submit" class="btn btn-success btn-sm" value="丟球" />
                }
            </td>
            <td style="width:200px"></td>
            <td>
                @using (Html.BeginForm("ReSet", "Bowling"))
                {
                    <input type="submit" class="btn btn-danger btn-sm" value="重新開始" />
                }
            </td>
        </tr>
    </table>
}

<br />
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Before</th>
            @foreach (var item in Model.Frames)
            {
                if (item != null)
                {
                    IEnumerable<LyBowling.Lib.Throw> trs = item.Throws();
                    int iCout = trs?.Count() ?? 0;
                    for (int i = 0; i < (3 - iCout); i++)
                    {
                        <td></td>
                    }
                    foreach (var tr in trs)
                    {
                        <td>@(tr?.Before)</td>
                    }

                }
                else
                {

                    <td></td>
                    <td></td>
                    <td></td>

                }
            }
        </tr>
        <tr>
            <th>After</th>
            @foreach (var item in Model.Frames)
            {
                if (item != null)
                {
                    IEnumerable<LyBowling.Lib.Throw> trs = item.Throws();
                    int iCout = trs?.Count() ?? 0;
                    for (int i = 0; i < (3 - iCout); i++)
                    {
                        <td></td>
                    }
                    foreach (var tr in trs)
                    {
                        <td>@(tr?.After)</td>
                    }

                }
                else
                {

                    <td></td>
                    <td></td>
                    <td></td>

                }
            }
        </tr>
        <tr>
            <th>Frame</th>
            @for (int i = 0; i < Model.FrameCount; i++)
            {
                <th colspan="3">
                    @(i + 1)
                </th>
            }
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>Fall</th>
            @foreach (var item in Model.Frames)
            {
                if (item != null)
                {
                    IEnumerable<LyBowling.Lib.Throw> trs = item.Throws();
                    int iCout = trs?.Count() ?? 0;
                    for (int i = 0; i < (3 - iCout); i++)
                    {
                        <td></td>
                    }
                    foreach (var tr in trs)
                    {
                        if (tr != null && tr.Fall.HasValue)
                        {
                            <td>@tr.Fall</td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }

                }
                else
                {

                    <td></td>
                    <td></td>
                    <td></td>

                }
            }
        </tr>
        <tr>
            <th>Source</th>
            @{
                int isource = 0;
            }

            @foreach (var item in Model.Frames)
            {
                <th colspan="3">
                    @if (item != null)
                    {
                        isource += item.Source();
                        @(isource);
                    }
                </th>
            }
        </tr>
    </tbody>
</table>
